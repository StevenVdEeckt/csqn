# -*- coding: utf-8 -*-
"""Copy of Reduction_strategies_for_CIFAR10_ClassIncremental_SR1_experiments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0Zyh6_gUoVytfH1IpDGHbE0JrKNQCDr

# CIFAR-100 Class-Incremental Experiments with S-LSR1

Tasks: Ten CIFAR-100 tasks, each with 10 of the 100 classes. Each task has a separate classification layer.

Model: 2 conv layers + 2 linear layers, 62k parameters in total.
"""

import torch
import argparse
import logging
from baselines import *
from dataset import *
from train_functions import *
import model

FORMAT = '%(asctime)-15s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.DEBUG, datefmt='%m/%d/%Y %I:%M:%S %p')
logger = logging.getLogger('main')

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
logger.debug('Device is: %s', device)

parser = argparse.ArgumentParser(description='Split CIFAR-100 Baselines..')
parser.add_argument('--ewc', type=int, default=1, help='Indicates if EWC should be run (1) or not (0)')
parser.add_argument('--ogd', type=int, default=1, help='Indicates if OGD should be run (1) or not (0)')
parser.add_argument('--lwf', type=int, default=1, help='Indicates if LWF should be run (1) or not (0)')
parser.add_argument('--mas', type=int, default=1, help='Indicates if MAS should be run (1) or not (0)')
parser.add_argument('--ft', type=int, default=0, help='Indicates if Fine-Tuning should be run (1) or not (0)')
parser.add_argument('--start', type=int, default=1, help='ID of first iteration')
parser.add_argument('--iter', type=int, default=5, help='Number of iterations to run each method')
parser.add_argument('--tasks', type=int, default=10, help='Number of tasks to run')

args = parser.parse_args()

""" The baselines and their settings """
run = []
if args.ewc == 1:
    run.append('EWC')
if args.ogd == 1:
    run.append('OGD')
if args.lwf == 1:
    run.append('LWF')
if args.mas == 1:
    run.append('MAS')
if args.ft == 1:
    run.append('Fine-Tuning')
if len(run) == 0:
    raise Exception("Exception: no methods to run!")
start_id = {'EWC': args.start, 'MAS': args.start, 'OGD': args.start, 'LWF': args.start, 'Fine-Tuning': 1}
iterations = {'EWC': args.iter, 'MAS': args.iter, 'OGD': args.iter, 'LWF': args.iter, 'Fine-Tuning': 1}
init_alpha = {'EWC': 100000, 'MAS': 1000, 'LWF': 1000}

""" Hyper-parameter search settings """
p_hyp = 0.8  # method must at least reach p*ACC_FT on new task
a_hyp = 0.5  # decaying factor

""" Experimental settings """
n_epoch = 5
n_tasks = args.tasks
batch_size = 64
res_name = 'cifar100_results_%d' % n_tasks
first_task = 'task1_cifar100_%d' % (100 // n_tasks)
neural_net = 'lenet'

train_data, dev_data, test_data, n_classes = get_split_cifar100_data(n_tasks, batch_size)
# required for OGD
train_data1, _, _, _ = get_split_cifar100_data(n_tasks, 1)

Net = lambda: model.get_net(neural_net, [n_classes] * n_tasks)
net, shared_layers = model.get_net(neural_net, [n_classes] * n_tasks, return_shared_layers=True)
freeze_layers = shared_layers

logger.debug("Neural network contains " + str(torch.cat([p.view(-1) for p in list(net.parameters())]).numel())
             + " parameters.")
for n, p in net.named_parameters():
    logger.debug(n + ' contains %d parameters' % (p.numel()))


logger.debug('# Preparing the assessment..')

try:
    results = torch.load(res_name, map_location=device)
except Exception as e:
    logger.warning('Exception occured: %s - could not load results file %s' % (str(e), res_name))
    results = {}

init(train_data, dev_data, test_data, res_name, n_tasks, n_epoch, n_classes, shared_layers)


net_one = Net()
try:
    net_one.load_state_dict(torch.load(first_task))
except Exception as e:
    logger.warning('Exception: file %s did not exist - training on task one.. (exception was = %s)' % (first_task, e))
    train_net(net_one, 0, epochs=n_epoch)
    torch.save(net_one.state_dict(), first_task)


logger.info("")
logger.info("# 3 Experiments with the Baselines")

for method in run:

    logger.info("Method: %s" % method)

    for num in range(start_id[method], start_id[method] + iterations[method]):

        mod_list = [copy.deepcopy(net_one).state_dict()]

        logger.info("### RUN %d of %d " % (num, iterations[method]))

        if method == 'EWC':
            regulator = EWC(shared_layers=shared_layers, n_classes=n_classes)
        elif method == 'MAS':
            regulator = MAS(shared_layers=shared_layers)
        elif method == 'LWF':
            regulator = LWF()
        elif method == 'OGD':
            regulator = OGD(M=200, shared_layers=shared_layers, n_classes=n_classes)
        elif method == 'Fine-Tuning':
            pass
        else:
            raise Exception("Exception: method = %s not found" % str(method))

        for task in range(n_tasks - 1):

            logger.info("Adapting Task %d to Task %d" % (task, task + 1))
            net_ = Net()
            net_.load_state_dict(mod_list[-1])
            names, accs = [('Task %d' % i) for i in range(task + 1)], \
                          [round(test(net_, i, 'dev', print_result=False), 2) for i in range(task + 1)]
            logger.info('Initial model: ' + str(names) + " = " + str(accs))

            if method == 'EWC':
                regulator.compute_FIM(net_, train_data(task), task)
                logger.debug(torch.norm(param_to_x(regulator.importance_weights)))
            elif method == 'MAS':
                regulator.compute_IW(net_, train_data(task), task)
            elif method == 'LWF':
                logger.debug('LWF - stage 1: training without shared layers')
                train_net(net_, task+1, epochs=n_epoch, freeze_layers=shared_layers)
                regulator.set_old_net(net_)
                sd_frozen = {n: copy.deepcopy(p) for n, p in net_.state_dict().items()}
            elif method == 'OGD':
                regulator.compute_gradients(net_, train_data1(task), task)

            if method != 'OGD':
                logging.debug("Adapting without regularization..")
                train_net(net_, task + 1, epochs=n_epoch)
                acc_ft = test(net_, task + 1, 'dev')
                if method == 'Fine-Tuning':
                    mod_list.append(net_.state_dict())
                    continue

                acc, alpha = 0, init_alpha[method]

                while acc < p_hyp * acc_ft:
                    logging.debug('alpha = %s' % alpha)
                    net_ = Net()
                    if method == 'LWF':
                        net_.load_state_dict(sd_frozen)
                        train_net(net_, task + 1, reg_loss=lambda x, y, t: regulator.regularize(x, y, alpha, t),
                                  epochs=n_epoch)
                    else:
                        net_.load_state_dict(mod_list[-1])
                        names, accs = [('Task %d' % i) for i in range(task + 1)], [
                            round(test(net_, i, 'dev', print_result=False), 2)
                            for i in range(task + 1)]
                        logger.info('Initial model: ' + str(names) + " = " + str(accs))
                        train_net(net_, task + 1, reg_loss=lambda x: regulator.regularize(x, alpha), epochs=n_epoch)
                    acc = test(net_, task + 1, 'dev')
                    logger.info("[Task %d] = [%.2f]" % (task + 1, acc))
                    alpha = a_hyp * alpha

                best_alpha = alpha / a_hyp
                logger.info("Best alpha was %d - with an average accuracy of %.2f" % (best_alpha, acc))

                mod_list.append(net_.state_dict())

            else:
                train_net(net_, task + 1, grad_fn=lambda x: regulator.regularize(x), epochs=n_epoch, opt='sgd')
                mod_list.append(net_.state_dict())

        logger.info("## 3.3 Evaluation")
        net_list = []
        for mod in mod_list:
            net_ = Net().cpu()
            net_.load_state_dict(mod)
            net_list.append(net_)
        test_and_update(net_list, method + ' %d' % num)
