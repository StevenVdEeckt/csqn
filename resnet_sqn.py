# -*- coding: utf-8 -*-
"""CIFAR10_AlexNet_ClassIncremental_experiments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Xgk1i0qcftWAvqeuhETc8QnOWI3KtQJ
"""

import torch
from csqn import CSQN
from dataset import *
import model
import logging
import argparse
from train_functions import *
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')



def cuda_overview():
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
        t = torch.cuda.get_device_properties(0).total_memory * 10.0 ** (-9)
        r = torch.cuda.memory_reserved(0) * 10.0 ** (-9)
        a = torch.cuda.memory_allocated(0) * 10.0 ** (-9)
        f = r - a  # free inside reserved
        logger.debug("CUDA memory - total: %.4f; reserved: %.4f; allocated: %.4f; available: %.4f" % (t, r, a, f))
    else:
        pass


parser = argparse.ArgumentParser(description='Split CIFAR-10/100 Baselines..')
parser.add_argument('--method', type=str, default="SR1", help='BFGS or SR1')
parser.add_argument('--m', type=int, default=10, help='Number of components')
parser.add_argument('--start', type=int, default=1, help='ID of first iteration')
parser.add_argument('--iter', type=int, default=3, help='Number of iterations')
parser.add_argument('--reduction', type=str, default='none', help='How to reduce Z')
parser.add_argument('--tasks', type=int, default=10, help='Number of tasks to run')
parser.add_argument('--log_id', type=int, default=0, help='ID of the log file')

args = parser.parse_args()

FORMAT = '%(asctime)-15s %(message)s'
logging.basicConfig(filename='5resnet_sqn_%d.log' % args.log_id, level=logging.DEBUG, format=FORMAT, datefmt='%m/%d/%Y %I:%M:%S %p')

logger = logging.getLogger('main')
logger.info("### Split CIFAR10/100 on ResNet-32: SQN")




""" SQN Settings """
M, method = args.m, args.method  # 'SR1' or 'BFGS'
start_id, iterations = args.start, args.iter
consolidation = 'Z'  # 'Z' or 'XA'
reduction = args.reduction  # 'none', 'auto', 'split', 'tree' - only relevant if consolidation = 'Z'
eps_ewc = 1e-4

""" Hyper-parameter search settings """
p_hyp = 0.8  # method must at least reach p*ACC_FT on new task
a_hyp = 0.5  # decaying factor

""" Experimental settings """
n_epoch = 10
batch_size = 64
n_tasks = args.tasks + 1
neural_net = 'resnet'
res_name = 'cifar10100_resnet_results'
first_task = 'task1_resnet_cifar10'


""" The data """
train_data, dev_data, test_data, n_classes = get_split_cifar10_100_data(n_tasks=n_tasks-1, batch_size=batch_size)
""" The neural network """
get_net = lambda: model.get_net(neural_net, [n_classes] * (n_tasks + 1))
net, shared_layers = model.get_net(neural_net,  [n_classes] * (n_tasks + 1), return_shared_layers=True)

logger.debug("Neural network contains " + str(torch.cat([p.view(-1) for p in list(net.parameters())]).numel())
              + " parameters.")
for n, p in net.state_dict().items():
    logger.debug(n + " ---> %d parameters" % (p.numel()))

logger.debug('Following are the shared layers: %s', shared_layers)

try:
    results = torch.load(res_name, map_location='cpu')
except Exception as e:
    logger.warning('Exception when loading results file: %s' % str(e))
    results = {}

init(train_data, dev_data, test_data, res_name, n_tasks, n_epoch, n_classes, shared_layers)


net_one = get_net()
net_one.load_state_dict(torch.load(first_task))


logger.info("")
logger.info("# 3 Experiments with CL with SQN Regularization")
for num in range(start_id, start_id + iterations):

    mod_list = [copy.deepcopy(net_one).state_dict()]

    logger.info("### RUN %d of %d " % (num, iterations))
    c_sqn = CSQN(method=method, shared_layers=shared_layers, M=M, eps_ewc=eps_ewc, reduction=reduction,
                 n_classes=n_classes)

    for task in range(n_tasks - 1):

        logger.info("Adapting Task %d to Task %d" % (task, task + 1))
        net_ = get_net()
        net_.load_state_dict(mod_list[-1])
        names, accs = [('Task %d' % i) for i in range(task + 1)], [round(test(net_, i, 'dev', print_result=False), 2)
                                                                   for i in range(task + 1)]
        logger.info('Initial model: ' + str(names) + " = " + str(accs))

        c_sqn.update(copy.deepcopy(net_), train_data(task), task)

        logger.debug("Adapting without regularization..")
        train_net(net_, task + 1, epochs=n_epoch)
        acc_ft = test(net_, task + 1, 'dev')

        acc, alpha = 0, 10000

        while acc < p_hyp * acc_ft:
            logger.info(c_sqn.get_name() + '-T%d [%d]' % (task, alpha))
            net_ = get_net()
            net_.load_state_dict(mod_list[-1])
            train_net(net_, task + 1, reg_loss=lambda x: c_sqn.regularize(x, alpha), epochs=n_epoch)
            acc = test(net_, task + 1, 'dev')
            logger.info("[Task %d] = [%.2f]" % (task + 1, acc))
            alpha = a_hyp * alpha

        best_alpha = alpha / a_hyp
        logger.info("Best alpha was %d - with an average accuracy of %.2f" % (best_alpha, acc))

        mod_list.append(net_.state_dict())

    logger.info("## 3.3 Evaluation")
    logger.info(c_sqn.get_name())
    net_list = []
    for mod in mod_list:
        net_ = get_net().cpu()
        net_.load_state_dict(mod)
        net_list.append(net_)
    test_and_update(net_list, c_sqn.get_name() + ' %d' % num)
